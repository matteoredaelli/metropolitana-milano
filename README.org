* Metropolitana Milano

Sample repo using the Prolog programming language for
searching paths between two stations of teh Milano area
(M1, M2, M3, M4, M5 and S1, ..., S14 suburban lines)


** Sample queries

swipl graph.pl routes.pl

 
#+BEGIN_SRC prolog

  %% Show all results
  set_prolog_flag(answer_write_options,[max_depth(0)]).

  %% Extract all lines
  ?- findall(X, station(_,X), L), sort(L, L1).
  L1 = [m1,m2,m3,m4,m5,s1,s11,s13,s14,s2,s3,s4,s5,s6,s7,s8,s9].

  %% Extract all stations
  findall(X, station(X,_), L), sort(L, L1).

  %% Which stations are directed comnnected to Milano Centrale?
  ?- findall([X,Linea], direct_connected('Centrale', X, Linea), L).
  L = [['Caiazzo', m2], ['Repubblica', m3], ['Gioia', m2], ['Sondrio', m3]].

  %% Find the path among two stations
  ?- route('Olgiate', 'Linate', Path, Changes).
  Path = [[Olgiate,s8],[Cernusco-Merate,s8],[Osnago,s8],[Carnate-Usmate,s8],[Arcore,s8],[Monza,s8],[Sesto FS (I Maggio),s8],[Greco Pirelli,s8],[Greco Pirelli,s9],[Lambrate,s9],[Forlanini,s9],[Forlanini,m4],[Repetti,m4],[Linate,m4]],
  Changes = 2 ;

#+END_SRC

** Sample rest api

In this repo you can find a sample rest service (not secured from the cyber security point of view)

  http://localhost:9876/metropolitana-milano?from=Olgiate&to=Linate

 
#+BEGIN_SRC json
  {
  "from":"Olgiate",
  "to":"Linate",
  "path": [
    [
      2,
      [
	["Olgiate", "s8" ],
	["Cernusco-Merate", "s8" ],
	["Osnago", "s8" ],
	["Carnate-Usmate", "s8" ],
	["Arcore", "s8" ],
	["Monza", "s8" ],
	["Sesto FS (I Maggio)", "s8" ],
	["Greco Pirelli", "s8" ],
	["Greco Pirelli", "s9" ],
	["Lambrate", "s9" ],
	["Forlanini", "s9" ],
	["Forlanini", "m4" ],
	["Repetti", "m4" ],
	["Linate", "m4" ]
      ]
    ...
#+END_SRC json

